#运行用户
#user  nobody;
user  root root; 

#启动进程数量,通常设置成和cpu的核心数量相等
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#进程PID文件
#pid        logs/nginx.pid;


events {
    use epoll;	#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  1024;#单个后台worker process进程的最大并发链接数,并发数量=worker_processes*worker_connections
}


http {
    #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
    
    #设定访问日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #设定访问日志位置
    #access_log  logs/access.log  main;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #连接保持(keepalive)时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #tcp_nodelay        on;#?
    #tcp_nopush		on;#?
    
    #开启静态压缩模块
    gzip_static on;

    #开启gzip压缩,排除IE6
    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_min_length  1k; 
    gzip_buffers     4 16k; 
    gzip_http_version 1.0; 
    gzip_comp_level 2; 
    gzip_types       text/plain application/x-javascript text/css application/xml; 
    gzip_vary on; 

     #设定请求缓冲   
	#server_names_hash_bucket_size 128; 
	#client_header_buffer_size 32k; 
	#large_client_header_buffers 4 32k; 
	##client_max_body_size 8m; 

    #设定负载均衡的服务器列表
    upstream weibo {
	#均衡算法设置:ip_hash;默认轮循调度
	#weigth:权重，max_fails:失败次数 ,fail_timeout:失败超时 ,down:设置下线，与ip_hash算法合用,backup:备用

	server 172.16.3.6:8080 backup;
	server 172.16.3.7:8080;
	server 172.16.3.8:8080;

	#ip_hash; #按ip hash分配，仅适用于nginx作为最前端
	#nginx_upstream_hash第三方模块:https://github.com/evanmiller/nginx_upstream_hash/
	#hash $http_x_forwarded_for;
	#hash $cookie_jsessionid;
	#nginx_upstream_jvm_route第三方模块:http://code.google.com/p/nginx-upstream-jvm-route/
	#server 192.168.2.79:8080 srun_id=tomcat1;
	#【tomcat1是我tomcat_1 server.xml里面配置的jvmroute=tomcat1】
	#server 192.168.2.79:8081 srun_id=tomcat2;
	#【tomcat2是我tomcat_2 server.xml里面配置的jvmroute=tomcat2】
	#jvm_route $cookie_JSESSIONID|sessionid reverse;#tomcat 
    }

    upstream xmpp {
	server 172.16.3.15:5280;
	#server 172.16.3.51:5280;
	#server 172.16.3.53:5280;
    }
    
    #xmpp-web服务
    server {
	listen       80;
        server_name  172.16.3.5;

	location / {
            root   html;
        }

	location /http-bind {
		proxy_read_timeout 120;
                proxy_send_timeout 120;
                proxy_connect_timeout 120;
		proxy_pass  http://xmpp/http-bind;

		#proxy_buffer_size           8k;
                #proxy_buffers               8 32k;
                #proxy_busy_buffers_size     64k;
                #proxy_next_upstream off;


	}

	location /http-poll {
		proxy_read_timeout 120;
                proxy_send_timeout 120;
                proxy_connect_timeout 120;
		proxy_pass  http://xmpp/http-poll;
	}

	location /admin {
		proxy_pass  http://xmpp/admin;
	}

	#设定查看Nginx状态的地址
	location /status {
		stub_status            on;
		access_log              on;
		#allow 172.16.*;
		#deny all;
		#auth_basic              "NginxStatus";
		#auth_basic_user_file  conf/htpasswd;
	}
    }



    #weibo服务
    server {
        listen       80;
        server_name  weibo.ts.local;
	
	
	
	#静态文件
	location /static {
		#root   /usr/local/nginx/html/static;
		root   html;
	}
	#异常页面
	location /error {
		#root   /usr/local/nginx/html/error;
		root   html;
	}

	error_page  404              /error/404.html;
	error_page  500              /error/500.html;
	error_page  503              /error/503.html;


	#设定查看Nginx状态的地址
	location /status {
		stub_status            on;
		access_log              on;
		#auth_basic              "NginxStatus";
		#auth_basic_user_file  conf/htpasswd;
	}

	location / {
		proxy_redirect off;
		#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass  http://weibo;
        }

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
